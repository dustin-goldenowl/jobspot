// Mocks generated by Mockito 5.4.2 from annotations
// in jobspot/test/features/connection/connection_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:jobspot/src/core/resources/data_state.dart' as _i2;
import 'package:jobspot/src/core/resources/fetch_lazy_data.dart' as _i5;
import 'package:jobspot/src/presentations/connection/domain/entities/post_entity.dart'
    as _i6;
import 'package:jobspot/src/presentations/connection/domain/entities/share_post_base.dart'
    as _i10;
import 'package:jobspot/src/presentations/connection/domain/use_cases/fetch_post_use_case.dart'
    as _i3;
import 'package:jobspot/src/presentations/connection/domain/use_cases/share_post_use_case.dart'
    as _i9;
import 'package:jobspot/src/presentations/view_post/domain/entities/favourite_entity.dart'
    as _i8;
import 'package:jobspot/src/presentations/view_post/domain/use_cases/favourite_post_use_case.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FetchPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPostUseCase extends _i1.Mock implements _i3.FetchPostUseCase {
  MockFetchPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.DataState<_i5.FetchLazyData<_i6.PostEntity>>> call(
          {required int? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4
            .Stream<_i2.DataState<_i5.FetchLazyData<_i6.PostEntity>>>.empty(),
      ) as _i4.Stream<_i2.DataState<_i5.FetchLazyData<_i6.PostEntity>>>);
}

/// A class which mocks [FavouritePostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavouritePostUseCase extends _i1.Mock
    implements _i7.FavouritePostUseCase {
  MockFavouritePostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call(
          {required _i8.FavouriteEntity? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}

/// A class which mocks [SharePostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharePostUseCase extends _i1.Mock implements _i9.SharePostUseCase {
  MockSharePostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call({required _i10.SharePostBase? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}
