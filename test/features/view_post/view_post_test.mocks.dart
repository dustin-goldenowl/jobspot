// Mocks generated by Mockito 5.4.2 from annotations
// in jobspot/test/features/view_post/view_post_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:jobspot/src/core/resources/data_state.dart' as _i2;
import 'package:jobspot/src/presentations/applicant_profile/domain/use_cases/delete_post_use_case.dart'
    as _i19;
import 'package:jobspot/src/presentations/connection/domain/entities/post_entity.dart'
    as _i7;
import 'package:jobspot/src/presentations/connection/domain/entities/share_post_base.dart'
    as _i18;
import 'package:jobspot/src/presentations/connection/domain/use_cases/share_post_use_case.dart'
    as _i17;
import 'package:jobspot/src/presentations/view_post/domain/entities/comment_entity.dart'
    as _i5;
import 'package:jobspot/src/presentations/view_post/domain/entities/favourite_entity.dart'
    as _i11;
import 'package:jobspot/src/presentations/view_post/domain/entities/reply_comment_entity.dart'
    as _i14;
import 'package:jobspot/src/presentations/view_post/domain/entities/send_comment_entity.dart'
    as _i9;
import 'package:jobspot/src/presentations/view_post/domain/use_cases/delete_comment_use_case.dart'
    as _i16;
import 'package:jobspot/src/presentations/view_post/domain/use_cases/favourite_comment_use_case.dart'
    as _i12;
import 'package:jobspot/src/presentations/view_post/domain/use_cases/favourite_post_use_case.dart'
    as _i10;
import 'package:jobspot/src/presentations/view_post/domain/use_cases/fetch_data_comment_first_level_use_case.dart'
    as _i3;
import 'package:jobspot/src/presentations/view_post/domain/use_cases/get_reply_comment_use_case.dart'
    as _i15;
import 'package:jobspot/src/presentations/view_post/domain/use_cases/reply_comment_use_case.dart'
    as _i13;
import 'package:jobspot/src/presentations/view_post/domain/use_cases/send_comment_use_case.dart'
    as _i8;
import 'package:jobspot/src/presentations/view_post/domain/use_cases/sync_post_data_use_case.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FetchDataCommentFirstLevelUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchDataCommentFirstLevelUseCase extends _i1.Mock
    implements _i3.FetchDataCommentFirstLevelUseCase {
  MockFetchDataCommentFirstLevelUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<List<_i5.CommentEntity>>> call(
          {required List<String>? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i2.DataState<List<_i5.CommentEntity>>>.value(
            _FakeDataState_0<List<_i5.CommentEntity>>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<List<_i5.CommentEntity>>>);
}

/// A class which mocks [SyncPostDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncPostDataUseCase extends _i1.Mock
    implements _i6.SyncPostDataUseCase {
  MockSyncPostDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.DataState<_i7.PostEntity?>> call({required String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Stream<_i2.DataState<_i7.PostEntity?>>.empty(),
      ) as _i4.Stream<_i2.DataState<_i7.PostEntity?>>);
}

/// A class which mocks [SendCommentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendCommentUseCase extends _i1.Mock
    implements _i8.SendCommentUseCase {
  MockSendCommentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call(
          {required _i9.SendCommentEntity? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}

/// A class which mocks [FavouritePostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavouritePostUseCase extends _i1.Mock
    implements _i10.FavouritePostUseCase {
  MockFavouritePostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call(
          {required _i11.FavouriteEntity? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}

/// A class which mocks [FavouriteCommentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavouriteCommentUseCase extends _i1.Mock
    implements _i12.FavouriteCommentUseCase {
  MockFavouriteCommentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call(
          {required _i11.FavouriteEntity? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}

/// A class which mocks [ReplyCommentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockReplyCommentUseCase extends _i1.Mock
    implements _i13.ReplyCommentUseCase {
  MockReplyCommentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call(
          {required _i14.ReplyCommentEntity? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}

/// A class which mocks [GetReplyCommentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetReplyCommentUseCase extends _i1.Mock
    implements _i15.GetReplyCommentUseCase {
  MockGetReplyCommentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<List<_i5.CommentEntity>>> call(
          {required String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i2.DataState<List<_i5.CommentEntity>>>.value(
            _FakeDataState_0<List<_i5.CommentEntity>>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<List<_i5.CommentEntity>>>);
}

/// A class which mocks [DeleteCommentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCommentUseCase extends _i1.Mock
    implements _i16.DeleteCommentUseCase {
  MockDeleteCommentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call({required String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}

/// A class which mocks [SharePostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharePostUseCase extends _i1.Mock implements _i17.SharePostUseCase {
  MockSharePostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call({required _i18.SharePostBase? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}

/// A class which mocks [DeletePostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeletePostUseCase extends _i1.Mock implements _i19.DeletePostUseCase {
  MockDeletePostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call({required _i7.PostEntity? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}
