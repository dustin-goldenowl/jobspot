// Mocks generated by Mockito 5.4.2 from annotations
// in jobspot/test/features/sign_in/sign_up_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:google_sign_in/google_sign_in.dart' as _i9;
import 'package:jobspot/src/core/resources/data_state.dart' as _i2;
import 'package:jobspot/src/presentations/sign_up/domain/entities/register_applicant_entity.dart'
    as _i5;
import 'package:jobspot/src/presentations/sign_up/domain/entities/register_business_entity.dart'
    as _i7;
import 'package:jobspot/src/presentations/sign_up/domain/use_cases/register_applicant_use_case.dart'
    as _i3;
import 'package:jobspot/src/presentations/sign_up/domain/use_cases/register_business_use_case.dart'
    as _i6;
import 'package:jobspot/src/presentations/sign_up/domain/use_cases/register_google_use_case.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RegisterApplicantUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterApplicantUseCase extends _i1.Mock
    implements _i3.RegisterApplicantUseCase {
  MockRegisterApplicantUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call(
          {required _i5.RegisterApplicantEntity? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}

/// A class which mocks [RegisterBusinessUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterBusinessUseCase extends _i1.Mock
    implements _i6.RegisterBusinessUseCase {
  MockRegisterBusinessUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call(
          {required _i7.RegisterBusinessEntity? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}

/// A class which mocks [RegisterGoogleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterGoogleUseCase extends _i1.Mock
    implements _i8.RegisterGoogleUseCase {
  MockRegisterGoogleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<bool>> call(
          {required _i9.GoogleSignInAccount? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<bool>>.value(_FakeDataState_0<bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<bool>>);
}
